<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NI.Data.Dalc</name>
    </assembly>
    <members>
        <member name="T:NI.Data.Dalc.Query">
            <summary>
            Generic query implementation
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQuery">
            <summary>
            Inteface for Query
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryValue">
            <summary>
            Interface for query left or right value
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.Query.Root">
            <summary>
            Filter expression root group. Can be null
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.Query.Sort">
            <summary>
            Sort expression. Can be null.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.Query.Fields">
            <summary>
            Fields to load through filter. Null for all
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.Query.StartRecord">
            <summary>
            Start record
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.SqlBuilder">
            <summary>
            Sql expression builder.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.ISqlBuilder">
            <summary>
            Sql builder interface.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SqlBuilder.QueryFieldValueFormatter">
            <summary>
            Get or set query field value formatter
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QSortField">
            <summary>
            QSortField
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryFieldValue">
            <summary>
            Interface for query field name value
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryGroupNode">
            <summary>
            Interface for filter group
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryNode">
            <summary>
            Interface for query expression node
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbDalcEventsMediator">
            <summary>
            Database dalc events mediator.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalcEventsMediator.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raise BeforeRowUpdate event
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalcEventsMediator.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raise AfterRowUpdate event
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalcEventsMediator.OnCommandExecuting(NI.Data.Dalc.DbCommandEventArgs)">
            <summary>
            Raise BeforeCommandExecute event
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalcEventsMediator.OnCommandExecuted(NI.Data.Dalc.DbCommandEventArgs)">
            <summary>
            Raise AfterCommandExecute event
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.IDbDalcEventsMediator.RowUpdating">
            <summary>
            Occurs during an update operation before a command is executed against the data source.
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.IDbDalcEventsMediator.RowUpdated">
            <summary>
            Occurs during an update operation after a command is executed against the data source.
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.IDbDalcEventsMediator.CommandExecuting">
            <summary>
            Occurs before a DB command is executed
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.IDbDalcEventsMediator.CommandExecuted">
            <summary>
            Occurs after a DB command is executed
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.CacheDalc">
            <summary>
            IDalc proxy that enables caching for 'load' results.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDalc">
            <summary>
            Data access layer component interface
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.Load(System.Data.DataSet,NI.Data.Dalc.IQuery)">
            <summary>
            Load data from data source to dataset
            </summary>
            <param name="ds">Destination dataset</param>
            <param name="query">Query</param>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.Update(System.Data.DataSet,System.String)">
            <summary>
            Update data from dataset to datasource
            </summary>
            <param name="ds">DataSet</param>
            <param name="sourceName"></param>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.Update(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Update data from dictionary container to datasource by query
            </summary>
            <param name="data">Container with record changes</param>
            <param name="query">query</param>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.Insert(System.Collections.IDictionary,System.String)">
            <summary>
            Insert data from dictionary container to datasource
            </summary>
            <param name="data">Container with record data</param>
            <param name="sourceName">Source name for data</param>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.Delete(NI.Data.Dalc.IQuery)">
            <summary>
            Delete data from dataset by query
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.LoadRecord(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Load first record by query
            </summary>
            <param name="data">Container for record data</param>
            <param name="query">query</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:NI.Data.Dalc.IDalc.RecordsCount(System.String,NI.Data.Dalc.IQueryNode)">
            <summary>
            Count the number of records
            </summary>
            <param name="sourceName">source name</param>
            <param name="conditions">additional conditions (can be null)</param>
            <returns>the number of records</returns>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.Load(System.Data.DataSet,NI.Data.Dalc.IQuery)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.Load(System.Data.DataSet,NI.Data.Dalc.IQuery)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.LoadRecord(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.LoadRecord(System.Collections.IDictionary,NI.Data.Dalc.IQuery)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.RecordsCount(System.String,NI.Data.Dalc.IQueryNode)">
            <summary>
            <see cref="!:IDalc.RecordCount"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.Update(System.Data.DataSet,System.String)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.Update(System.Data.DataSet,System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.Update(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.Update(System.Data.DataSet,System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.Insert(System.Collections.IDictionary,System.String)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.Insert(System.Collections.IDictionary,System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.CacheDalc.Delete(NI.Data.Dalc.IQuery)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.Delete(NI.Data.Dalc.IQuery)"/>
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.LoadCache">
            <summary>
            Get or set cache instace used for caching 'Load' results
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.LoadRecordCache">
            <summary>
            Get or set cache instace used for caching 'LoadRecord' results
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.RecordCountCache">
            <summary>
            Get or set cache instace used for caching 'RecordCount' results
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.UnderlyingDalc">
            <summary>
            Get or set underlying DALC instance
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.CacheKeyProvider">
            <summary>
            Get or set cache key provider
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.CacheValidatorProvider">
            <summary>
            Get or set cache validator provider by source name (s). <br/>
            Null validator provider means total caching. 
            And null validator for source name does not allow caching of value in CacheDalc.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.ValueCachingAllowedProvider">
            <summary>
            Get or set provider that determines if value must be cached by value as context.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDalc.QueryCachingAllowedProvider">
            <summary>
            Get or set provider that determines if value must be cached by query as context.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbDalc">
            <summary>
            Database DALC
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalc.Execute(System.String)">
            <summary>
            Execute SQL command
            </summary>
            <param name="sqlText">SQL command text</param>
            <returns>Records affected</returns>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalc.ExecuteReader(System.String)">
            <summary>
            Execute given raw SQL and return data reader
            </summary>
            <remarks>
            Code that uses this method should manually maintain DB connection state
            (it should be opened before calling this method)
            </remarks>
            <param name="query">query</param>
            <returns>data reader with possible command execution results</returns>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalc.LoadReader(NI.Data.Dalc.IQuery)">
            <summary>
            Execute given query and return data reader
            </summary>
            <remarks>
            Code that uses this method should manually maintain DB connection state
            (it should be opened before calling this method)
            </remarks>
            <param name="query">query</param>
            <returns>data reader with possible query execution results</returns>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalc.Load(System.Data.DataSet,System.String)">
            <summary>
            Execute custom SQL command and store result in specified dataset
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDalc.LoadRecord(System.Collections.IDictionary,System.String)">
            <summary>
            Load first
            </summary>
            <param name="data"></param>
            <param name="sqlCommandText"></param>
            <returns>Success flag</returns>
        </member>
        <member name="P:NI.Data.Dalc.IDbDalc.Connection">
            <summary>
            Connection
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.IDbDalc.Transaction">
            <summary>
            Transaction
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.CacheDbDalc.UnderlyingDbDalc">
            <summary>
            Get or set underlying DB DALC component
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.FailsafeDalc">
            <summary>
            'Failsafe' IDbDalc wrapper.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbDalc">
            <summary>
            Database Data Access Layer Component
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.#ctor">
            <summary>
            Initializes a new instance of the DbDalc class.
            Note: Connection and CommandGenerator should be initialized
            before using this component.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Load(System.Data.DataSet,NI.Data.Dalc.IQuery)">
            <summary>
            Load data to dataset by query
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Delete(NI.Data.Dalc.IQuery)">
            <summary>
            Delete data by query
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Update(System.Data.DataSet,System.String)">
            <summary>
            Update one table in DataSet
            Note: method 'AcceptChanges' will not called automatically
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Update(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Update data from dictionary container to datasource by query
            </summary>
            <param name="data">Container with record changes</param>
            <param name="query">query</param>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Insert(System.Collections.IDictionary,System.String)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDalc.Insert(System.Collections.IDictionary,System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Execute(System.String)">
            <summary>
            Execute SQL command
            </summary>
            <param name="sqlText">SQL command text to execute</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.ExecuteReader(System.String)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDbDalc.Execute(System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.LoadReader(NI.Data.Dalc.IQuery)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDbDalc.Execute(System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.Load(System.Data.DataSet,System.String)">
            <summary>
            <see cref="M:NI.Data.Dalc.IDbDalc.Load(System.Data.DataSet,System.String)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.LoadRecord(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Load single record into hashtable
            </summary>
            <param name="tablename">Table's name</param>
            <param name="filter">Record filter</param>
            <returns>Hashtable with 'field'=>'value' pairs (or null if no data)</returns>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.LoadRecord(System.Collections.IDictionary,System.String)">
            <summary>
            Load single record into hashtable
            </summary>
            <param name="sqlCommandText">SQL command text to execute</param>
            <returns>Hashtable with 'field'=>'value' pairs (or null if no data)</returns>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.OnRowUpdating(System.Object,System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            This method should be called before row updating
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.OnRowUpdated(System.Object,System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            This method should be called after row updated
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.GenerateAdapterCommands(NI.Data.Dalc.IDbDataAdapterWrapper,System.Data.DataTable)">
            <summary>
            Automatically generates Insert/Update/Delete commands for Adapter
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalc.ExecuteInternal(NI.Data.Dalc.IDbCommandWrapper,System.String,System.Data.StatementType)">
            <summary>
            Execute SQL command
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalc.CommandGenerator">
            <summary>
            Get or set database commands generator
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalc.AdapterWrapperFactory">
            <summary>
            Get or set adapter wrapper factory component
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalc.Connection">
            <summary>
            Get or set database connection
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalc.Transaction">
            <summary>
            Database transaction object
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.ThreadsafeDalc">
            <summary>
            'Threadsafe' IDbDalc wrapper.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.INamedQueryNode">
            <summary>
            Interface for named query expression node
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.QueryGroupNode.op_BitwiseOr(NI.Data.Dalc.QueryGroupNode,NI.Data.Dalc.IQueryNode)">
            <summary>
            OR operator
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.QueryGroupNode.op_BitwiseAnd(NI.Data.Dalc.QueryGroupNode,NI.Data.Dalc.IQueryNode)">
            <summary>
            AND operator
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.QueryGroupNode.NI#Data#Dalc#IQueryNode#Nodes">
            <summary>
            Nodes collection
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.QueryGroupNode.Group">
            <summary>
            Group type
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDataSetProvider">
            <summary>
            DataSet provider interface
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QueryNode">
            <summary>
            Base class for query nodes.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.QueryNode.op_BitwiseOr(NI.Data.Dalc.QueryNode,NI.Data.Dalc.IQueryNode)">
            <summary>
            OR operator
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.QueryNode.op_BitwiseAnd(NI.Data.Dalc.QueryNode,NI.Data.Dalc.IQueryNode)">
            <summary>
            AND operator
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QRawConst">
            <summary>
            IQueryConstantValue implementation
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryRawValue">
            <summary>
            Interface for query raw value
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryConditionNode">
            <summary>
            Inteface for filter condition object
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbCommandGenerator">
            <summary>
            DB Command generator interface
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DalcRecordDictionaryProvider">
            <summary>
            DALC record dictionary provider
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DalcRecordDictionaryProvider.GetDictionary(System.Object)">
            <summary>
            Get record dictionary using specified context
            <see cref="M:NI.Common.Providers.IDictionaryProvider.GetDictionary(System.Object)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DalcRecordDictionaryProvider.ProvideTokens(System.Collections.IDictionary)">
            <summary>
            <see cref="M:NI.Common.ITokenProvider.ProvideTokens(System.Collections.IDictionary)"/>
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcRecordDictionaryProvider.QueryProvider">
            <summary>
            Get or set relational expressions used to load data
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcRecordDictionaryProvider.Dalc">
            <summary>
            Get or set DALC component to load data from
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DalcDataSetProvider">
            <summary>
            Load dataset using query providers.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcDataSetProvider.QueryProviders">
            <summary>
            Get or set relational expressions used to load data
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcDataSetProvider.Dalc">
            <summary>
            Get or set DALC component to load data from
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.ChainQueryFieldValueFormatter">
            <summary>
            Chain-based IQueryFieldValueFormatter implementation.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryFieldValueFormatter">
            <summary>
            IQueryFieldValueFormatter.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QueryProvider">
            <summary>
            Simple 'proxy' query provider implementation.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryProvider">
            <summary>
            Query provider interface
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.QueryProvider.UnderlyingObjectProvider">
            <summary>
            Get or set underlying object provider
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.QueryProvider.QueryModifier">
            <summary>
            Get or set query modifier
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QueryFieldValueFormatter">
            <summary>
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbDataViewCommandGenerator">
            <summary>
            Database Command Generator with data view support.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbCommandGenerator">
            <summary>
            Database Command Generator
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.#ctor">
            <summary>
            Initializes a new instance of the DbCommandGenerator class.
            Note: DbFactory property should be set before using this component.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.#ctor(NI.Data.Dalc.IDbCommandWrapperFactory)">
            <summary>
            Initializes a new instance of the DbCommandGenerator class.
            </summary>
            <param name="dbFactory">IDbFactory implementation</param>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeSelect(NI.Data.Dalc.IQuery)">
            <summary>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeInsert(System.Data.DataTable)">
            <summary>
            Generates INSERT statement by DataTable
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeDelete(System.Data.DataTable)">
            <summary>
            Generates DELETE statement by DataTable
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeDelete(NI.Data.Dalc.IQuery)">
            <summary>
            Generates DELETE statement by query
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeUpdate(System.Data.DataTable)">
            <summary>
            Generates UPDATE statement by DataTable
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeUpdate(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Create UPDATE command by changes data and query
            </summary>
            <param name="changesData"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:NI.Data.Dalc.DbCommandGenerator.ComposeInsert(System.Collections.IDictionary,System.String)">
            <summary>
            Generates INSERT statement by row data
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbCommandGenerator.CommandWrapperFactory">
            <summary>
            DB Command Wrapper Factory
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDataViewCommandGenerator.ComposeDataViewSelect(NI.Data.Dalc.IDbDataView,NI.Data.Dalc.IQuery)">
            <summary>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDataViewCommandGenerator.IsolateWhereExpression(System.String)">
            <summary>
            Isolates 'where expression' from context where it will be inserted
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.SqlClient.SqlClientDbSqlBuilder">
            <summary>
            MS SQL optimized SQL builder
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbSqlBuilder">
            <summary>
            Database sql builder.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbSqlBuilder">
            <summary>
            DB Sql builder interface.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbDalcEventsMediator">
            <summary>
            Database DALC events mediator.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DalcObjectProvider">
            <summary>
            DALC IObjectProvider implementation.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcObjectProvider.QueryProvider">
            <summary>
            Get or set relational expressions used to load data
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcObjectProvider.Dalc">
            <summary>
            Get or set DALC component to load data from
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DalcDictionaryListProvider">
            <summary>
            DalcDictionaryListProvider.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DalcObjectListProvider">
            <summary>
            Data list provider that uses DALC to load data.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DalcObjectListProvider.GetObjectList(System.Object)">
            <summary>
            <see cref="M:NI.Common.Providers.IObjectListProvider.GetObjectList(System.Object)"/>
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DalcObjectListProvider.PrepareObject(System.Data.DataRow,System.String[])">
            <summary>
            Prepare list object by data from DALC
            </summary>
            <param name="row">DataRow instance</param>
            <param name="fields">fields to include in result object (can be null)</param>
            <returns>data row object</returns>
        </member>
        <member name="M:NI.Data.Dalc.DalcObjectListProvider.GetObject(System.Object)">
            <summary>
            <see cref="M:NI.Common.Providers.IObjectProvider.GetObject(System.Object)"/>
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcObjectListProvider.QueryProvider">
            <summary>
            Get or set query provider that specifies data list to load
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DalcObjectListProvider.Dalc">
            <summary>
            Get or set DALC component used to load list data
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.SqlClient.SqlCommandWrapper">
            <summary>
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbCommandWrapper">
            <summary>
            DB command wrapper interface
            </summary>
            <remarks>
            In most cases IDbCommand implementations cannot be extended (for instance, SqlCommand is sealed class).
            </remarks>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapper.SetTransaction(System.Data.IDbTransaction)">
            <summary>
            Set context transaction
            </summary>
            <remarks>
            At least SqlCommand MONO implementations is buggy so you cannot
            directly set SqlCommand.Transaction=null
            </remarks>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapper.GetCmdParameterPlaceholder(System.String)">
            <summary>
            Gets DB-specific Command Parameter Placeholder
            </summary>
            <remarks>
            In some cases IDbCommand implementation requires special handling for
            command parameters placeholder in the command text (example: OleDbCommand
            works with positional parameters, so '?' should be used instead of
            parameter name).
            </remarks>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapper.CreateCmdParameter(System.Data.DataColumn)">
            <summary>
            Create command parameter by source data column
            </summary>
            <remarks>
            In some cases IDbDataParameter should be initialized in special manner
            (depends on implementation, example: OleDbParameter+Access database)
            </remarks>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapper.CreateCmdParameter(System.Object)">
            <summary>
            Create command parameter by source data column
            </summary>
            <remarks>
            In some cases IDbDataParameter should be initialized in special manner
            (depends on implementation, example: OleDbParameter+Access database)
            </remarks>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapper.CreateSqlBuilder">
            <summary>
            Create DB sql builder for this command wrapper
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapper.GetInsertId">
            <summary>
            Returns inserted row id
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.IDbCommandWrapper.Command">
            <summary>
            Get wrapped IDbCommand
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.SqlClient.SqlCommandWrapper.GetInsertId">
            <summary>
            Returns inserted row id
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QField">
            <summary>
            IQueryFieldValue implementation
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbDalcProxy">
            <summary>
            Pipe Db dalc
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalcProxy.UnderlyingDalc">
            <summary>
            Underlying dalc
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryConstantValue">
            <summary>
            Interface for query constant value
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbTypeResolver">
            <summary>
            DbType enumeration member resolver.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbTypeResolver.Resolve(System.Type)">
            <summary>
            Resolve DbType by System.Type
            </summary>
            <param name="type">.net type</param>
            <returns>DB type</returns>
        </member>
        <member name="T:NI.Data.Dalc.DbCommandEventArgs">
            <summary>
            Database command event arguments.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbCommandEventArgs.SourceName">
            <summary>
            Get or set affected source name.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbCommandEventArgs.CommandType">
            <summary>
            Get or set DB command type.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbCommandEventArgs.Command">
            <summary>
            Get or set event argument 
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbDataView">
            <summary>
            Data view info.
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbDataView">
            <summary>
            IDbDataView.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDataView.MatchSourceName(System.String)">
            <summary>
            Determines whether this dataview matches given sourcename
            </summary>
            <param name="sourceName">sourcename to test</param>
        </member>
        <member name="P:NI.Data.Dalc.IDbDataView.SourceNameOrigin">
            <summary>
            Source name of data view origin (optional; can be null)
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.QConst">
            <summary>
            IQueryConstantValue implementation
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DatasetDalc">
            <summary>
            Dataset Data Access Layer Component.
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.Load(System.Data.DataSet,NI.Data.Dalc.IQuery)">
            <summary>
            Load data from data source to dataset
            </summary>
            <param name="ds">Destination dataset</param>
            <param name="query">Query</param>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.Update(System.Data.DataSet,System.String)">
            <summary>
            Update data from dataset to datasource
            </summary>
            <param name="ds">DataSet</param>
            <param name="tableName"></param>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.Update(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Update data from dictionary container to datasource by query
            </summary>
            <param name="data">Container with record changes</param>
            <param name="query">query</param>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.Insert(System.Collections.IDictionary,System.String)">
            <summary>
            Insert data from dictionary container to datasource
            </summary>
            <param name="data">Container with record changes</param>
            <param name="sourceName">source name</param>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.Delete(NI.Data.Dalc.IQuery)">
            <summary>
            Delete data from dataset by query
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.LoadRecord(System.Collections.IDictionary,NI.Data.Dalc.IQuery)">
            <summary>
            Load first record by query
            </summary>
            <param name="data">Container for record data</param>
            <param name="query">query</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.BuildValue(NI.Data.Dalc.IQueryConstantValue)">
            <summary>
            Special implementation for dataset constants
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.DataRowDiffHandler.Compare(System.Object,System.Object)">
            <summary>
            Compare two elements
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.DataRowDiffHandler.Merge(System.Object,System.Object)">
            <summary>
            Merge action for two elements
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.DataRowDiffHandler.Add(System.Object)">
            <summary>
            Add action
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DatasetDalc.DataRowDiffHandler.Remove(System.Object)">
            <summary>
            Remove action
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.SharedConnectionDbDalc">
            <summary>
            Composite DbDalc.
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SharedConnectionDbDalc.Satellites">
            <summary>
            Get or set satellite DbDalc objects
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SharedConnectionDbDalc.Connection">
            <summary>
            <see cref="P:NI.Data.Dalc.DbDalc.Connection"/>
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SharedConnectionDbDalc.Transaction">
            <summary>
            <see cref="P:NI.Data.Dalc.DbDalc.Transaction"/>
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.ChainQueryModifier">
            <summary>
            Chain of another IQueryModifier implementations
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryModifier">
            <summary>
            Query structure modifier interface
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.ChainQueryModifier.Modify(NI.Data.Dalc.IQuery)">
            <summary>
            Modify specified query using external modifiers 'by chain'
            </summary>
            <param name="q">query to modify</param>
            <returns>modified query</returns>
        </member>
        <member name="P:NI.Data.Dalc.ChainQueryModifier.Modifiers">
            <summary>
            Get or set chain modifiers list
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalcTransaction.BeginInternal">
            <summary>
            Begin operation internal logic
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalcTransaction.CommitInternal">
            <summary>
            Commit operation internal logic
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.DbDalcTransaction.AbortInternal">
            <summary>
            Abort operation internal logic
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.ObjectQueryConditionEvaluator">
            <summary>
            Object query condition evaluator. Evaluates IQueryNode condition in some 'object' context.
            </summary>
            <remarks>This resolver does not support all possible IQueryNode tree structures.</remarks>
        </member>
        <member name="P:NI.Data.Dalc.ObjectQueryConditionEvaluator.QFieldResolver">
            <summary>
            Field value resolver (required)
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.ObjectQueryConditionEvaluator.QConstResolver">
            <summary>
            Const value resolver (optional)
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryNegationNode">
            <summary>
            Query negation node interface
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbCommandWrapperFactory">
            <summary>
            Database command wrapper factory interface
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbCommandWrapperFactory.CreateInstance">
            <summary>
            Create command wrapper instance
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DataSetProvider">
            <summary>
            DataSetProvider provides get DataSet provided by underlying object provider
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IQueryNodeProvider">
            <summary>
            Query provider interface
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbDataAdapterWrapper">
            <summary>
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.IDbDataAdapterWrapper.Adapter">
            <summary>
            Adapter
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.IDbDataAdapterWrapper.RowUpdating">
            <summary>
            Row updating event
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.IDbDataAdapterWrapper.RowUpdated">
            <summary>
            Row updated event
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DataSetXmlProvider">
            <summary>
            DataSetXmlProvider provides XML representation of the data stored in the System.Data.DataSet
            provided by underlying NI.Data.Dalc.IDataSetProvider
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DataSetXmlProvider.DataSetName">
            <summary>
            If DataSetName is set, it overrides the name of the dataset provided by UnderlyingDataSetProvider
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SubstQueryModifier.SubstQueryDescriptor.Query">
            <summary>
            Get or set query that represents virtual relation
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SubstQueryModifier.SubstQueryDescriptor.MatchSourceName">
            <summary>
            Get or set source name to substitute (actually, name of virtual relation)
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SubstQueryModifier.SubstQueryDescriptor.FieldMapping">
            <summary>
            Get or set field mapping for 'virtual' relation
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.SubstQueryModifier.SubstQueryDescriptor.GroupDescriptors">
            <summary>
            Get or set query group modifiers
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.XmlDataSetProvider">
            <summary>
            XmlDataSetProvider provides DataSet object from xml representation
            provided by underlying NI.Common.Providers.IStringProvider
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.IDbDataAdapterWrapperFactory">
            <summary>
            Database adapter component factory interface
            </summary>
        </member>
        <member name="M:NI.Data.Dalc.IDbDataAdapterWrapperFactory.CreateInstance">
            <summary>
            Creates adapter wrapper instance
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.SqlClient.SqlAdapterWrapper">
            <summary>
            SqlAdapterWrapper.
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.SqlClient.SqlAdapterWrapper.RowUpdating">
            <summary>
            Row updating event
            </summary>
        </member>
        <member name="E:NI.Data.Dalc.SqlClient.SqlAdapterWrapper.RowUpdated">
            <summary>
            Row updated event
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.QueryNegationNode.Nodes">
            <summary>
            Nodes collection
            </summary>
        </member>
        <member name="T:NI.Data.Dalc.DbDalcTraceLogger">
            <summary>
            DB DALC trace logger
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalcTraceLogger.Enabled">
            <summary>
            Get or set flag that indicates whether logger is enabled
            </summary>		
        </member>
        <member name="P:NI.Data.Dalc.DbDalcTraceLogger.LogMsgPrefix">
            <summary>
            Get or set log message prefix 
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalcTraceLogger.ReplaceParamPlaceholders">
            <summary>
            Get or set flag that indicates whether command parameters
            should be replaced with their values in command text
            </summary>
        </member>
        <member name="P:NI.Data.Dalc.DbDalcTraceLogger.DbDalcEventsMediator">
            <summary>
            Get or set DALC events mediator
            </summary>
        </member>
    </members>
</doc>
